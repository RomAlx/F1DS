"""
–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
"""
import os
from datetime import datetime
from config import DEFAULT_TRAIN_YEARS, PREDICT_YEAR, CACHE_DIR
from src.data.loader import F1DataLoader
from src.model.trainer import ModelTrainer
from src.model.predictor import F1Predictor

class MainMenu:
    def __init__(self):
        self.loader = F1DataLoader()
        self.trainer = ModelTrainer()
        self.predictor = F1Predictor()
        self.current_year = datetime.now().year

    @staticmethod
    def clear_screen():
        """–û—á–∏—Å—Ç–∫–∞ —ç–∫—Ä–∞–Ω–∞"""
        os.system('clear' if os.name == 'posix' else 'cls')

    @staticmethod
    def print_header():
        """–í—ã–≤–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
        print("=" * 60)
        print("üèéÔ∏è  F1 PREDICTOR - –°–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ F1")
        print("=" * 60)
        print()

    @staticmethod
    def print_menu():
        """–í—ã–≤–æ–¥ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        print("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:")
        print()
        print("  1. üíæ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≥–æ–¥ (–≤–∫–ª—é—á–∞—è —Å–ø—Ä–∏–Ω—Ç—ã)")
        print("  2. üéì –û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å")
        print("  3. üß™ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–æ–¥–µ–ª—å –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–º –≥–æ–¥—É")
        print("  4. üîÆ –°–¥–µ–ª–∞—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –≥–æ–¥")
        print("  5. üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏")
        print("  0. üö™ –í—ã—Ö–æ–¥")
        print()

    def cache_data(self):
        """–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≥–æ–¥"""
        print("\n" + "="*60)
        print("üíæ –ö–≠–®–ò–†–û–í–ê–ù–ò–ï –î–ê–ù–ù–´–•")
        print("="*60)

        default_year = self.current_year - 1
        year_input = input(f"\nüìÖ –í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é {default_year}): ").strip()

        year = int(year_input) if year_input else default_year

        print(f"\n‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞ {year} –≥–æ–¥...")
        print("   –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç...")
        print("   üì¶ –ë—É–¥—É—Ç –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω—ã –≥–æ–Ω–∫–∏, –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ —Å–ø—Ä–∏–Ω—Ç—ã")

        try:
            self.loader.cache_season(year)
            print(f"\n‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞ {year} –≥–æ–¥ —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω—ã!")
            print(f"üìÅ –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {CACHE_DIR}")
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")

        input("\n‚èé –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")

    def train_model(self):
        """–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏"""
        print("\n" + "="*60)
        print("üéì –û–ë–£–ß–ï–ù–ò–ï –ú–û–î–ï–õ–ò")
        print("="*60)

        print(f"\nüìå –ì–æ–¥–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {', '.join(map(str, DEFAULT_TRAIN_YEARS))}")
        print("\n1. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–æ–¥–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞")
        print("2. –í–≤–µ—Å—Ç–∏ –≥–æ–¥–∞ –≤—Ä—É—á–Ω—É—é")

        choice = input("\n–í–∞—à –≤—ã–±–æ—Ä (1/2): ").strip()

        if choice == "2":
            years_input = input("\nüìÖ –í–≤–µ–¥–∏—Ç–µ –≥–æ–¥–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2019,2021,2023): ").strip()
            try:
                years = [int(y.strip()) for y in years_input.split(",")]
            except ValueError:
                print("\n‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≥–æ–¥–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞.")
                years = DEFAULT_TRAIN_YEARS
        else:
            years = DEFAULT_TRAIN_YEARS

        print(f"\n‚è≥ –ù–∞—á–∏–Ω–∞—é –æ–±—É—á–µ–Ω–∏–µ –Ω–∞ –¥–∞–Ω–Ω—ã—Ö: {', '.join(map(str, years))}")
        print("   –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç...")
        print("   üìä –ú–æ–¥–µ–ª—å –±—É–¥–µ—Ç —É—á–∏—Ç—ã–≤–∞—Ç—å –∫–∞–∫ –≥–æ–Ω–∫–∏, —Ç–∞–∫ –∏ —Å–ø—Ä–∏–Ω—Ç—ã")

        try:
            metrics = self.trainer.train(years)

            print("\n" + "="*60)
            print("‚úÖ –ú–û–î–ï–õ–¨ –£–°–ü–ï–®–ù–û –û–ë–£–ß–ï–ù–ê!")
            print("="*60)
            print(f"\nüìä –ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞:")
            print(f"   ‚Ä¢ MAE (—Å—Ä–µ–¥–Ω—è—è –∞–±—Å–æ–ª—é—Ç–Ω–∞—è –æ—à–∏–±–∫–∞): {metrics['mae']:.3f}")
            print(f"   ‚Ä¢ RMSE (–∫–æ—Ä–µ–Ω—å –∏–∑ —Å—Ä–µ–¥–Ω–µ–∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–æ–π –æ—à–∏–±–∫–∏): {metrics['rmse']:.3f}")
            print(f"   ‚Ä¢ Accuracy (—Ç–æ—á–Ω–æ—Å—Ç—å —Ç–æ–ø-10): {metrics['accuracy']:.2%}")
            print(f"\nüíæ –ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {metrics['model_path']}")

        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏: {e}")
            import traceback
            traceback.print_exc()

        input("\n‚èé –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")

    def test_model(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–∏ –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–º –≥–æ–¥—É"""
        print("\n" + "="*60)
        print("üß™ –ü–†–û–í–ï–†–ö–ê –ú–û–î–ï–õ–ò")
        print("="*60)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏
        available_models = self.trainer.list_models()

        if not available_models:
            print("\n‚ùå –ù–µ—Ç –æ–±—É—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π! –°–Ω–∞—á–∞–ª–∞ –æ–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å.")
            input("\n‚èé –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            return

        print("\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:")
        for idx, model_info in enumerate(available_models, 1):
            print(f"   {idx}. {model_info['name']} - –æ–±—É—á–µ–Ω–∞ –Ω–∞ {len(model_info['years'])} –≥–æ–¥–∞—Ö")

        model_choice = input(f"\n–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å (1-{len(available_models)}): ").strip()

        try:
            model_idx = int(model_choice) - 1
            model_path = available_models[model_idx]['path']
        except (ValueError, IndexError):
            print("\n‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä! –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω—è—è –º–æ–¥–µ–ª—å.")
            model_path = available_models[-1]['path']

        test_year = input("\nüìÖ –í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ").strip()

        try:
            test_year = int(test_year)
            print(f"\n‚è≥ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –Ω–∞ –¥–∞–Ω–Ω—ã—Ö {test_year} –≥–æ–¥–∞...")
            print("   üìä –£—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –≤—Å–µ —Å–µ—Å—Å–∏–∏ (–≥–æ–Ω–∫–∏ –∏ —Å–ø—Ä–∏–Ω—Ç—ã)")

            results = self.predictor.test_model(model_path, test_year)

            print("\n" + "="*60)
            print("‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
            print("="*60)
            print(f"\nüìä –ú–µ—Ç—Ä–∏–∫–∏:")
            print(f"   ‚Ä¢ MAE: {results['metrics']['mae']:.3f}")
            print(f"   ‚Ä¢ RMSE: {results['metrics']['rmse']:.3f}")
            print(f"   ‚Ä¢ Accuracy (—Ç–æ–ø-10): {results['metrics']['accuracy']:.2%}")
            print(f"\nüìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {results['output_dir']}")

        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
            import traceback
            traceback.print_exc()

        input("\n‚èé –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")

    def make_prediction(self):
        """–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –≥–æ–¥"""
        print("\n" + "="*60)
        print("üîÆ –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–ï –ù–ê –°–õ–ï–î–£–Æ–©–ò–ô –ì–û–î")
        print("="*60)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏
        available_models = self.trainer.list_models()

        if not available_models:
            print("\n‚ùå –ù–µ—Ç –æ–±—É—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π! –°–Ω–∞—á–∞–ª–∞ –æ–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å.")
            input("\n‚èé –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            return

        print("\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:")
        for idx, model_info in enumerate(available_models, 1):
            print(f"   {idx}. {model_info['name']} - –æ–±—É—á–µ–Ω–∞ –Ω–∞ {len(model_info['years'])} –≥–æ–¥–∞—Ö")

        model_choice = input(f"\n–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å (1-{len(available_models)}): ").strip()

        try:
            model_idx = int(model_choice) - 1
            model_path = available_models[model_idx]['path']
        except (ValueError, IndexError):
            print("\n‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä! –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω—è—è –º–æ–¥–µ–ª—å.")
            model_path = available_models[-1]['path']

        predict_year = input(f"\nüìÖ –ì–æ–¥ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é {PREDICT_YEAR}): ").strip()
        predict_year = int(predict_year) if predict_year else PREDICT_YEAR

        print(f"\n‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –Ω–∞ {predict_year} –≥–æ–¥...")
        print("   üèéÔ∏è  –°–∏–º—É–ª–∏—Ä—É—é—Ç—Å—è –≤—Å–µ –≥–æ–Ω–∫–∏ –∏ —Å–ø—Ä–∏–Ω—Ç—ã")
        print("   ‚ö° –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –æ—á–∫–æ–≤ F1")

        try:
            results = self.predictor.predict_season(model_path, predict_year)

            print("\n" + "="*60)
            print("‚úÖ –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
            print("="*60)

            print("\nüèÜ –¢–û–ü-3 –ö–û–ú–ê–ù–î–´:")
            for idx, team in enumerate(results['top_teams'][:3], 1):
                points = team.get('total_points', team.get('predicted_points', 0))
                wins = team.get('wins', 0)
                podiums = team.get('podiums', 0)
                print(f"   {idx}. {team['team']} - {points:.1f} –æ—á–∫–æ–≤ (üèÜ{wins} üèÖ{podiums})")

            print("\nüèÅ –¢–û–ü-10 –ì–û–ù–©–ò–ö–û–í:")
            for idx, driver in enumerate(results['top_drivers'][:10], 1):
                points = driver.get('total_points', driver.get('predicted_points', 0))
                wins = driver.get('wins', 0)
                podiums = driver.get('podiums', 0)
                sprint_wins = driver.get('sprint_wins', 0)

                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                stats = f"üèÜ{wins}"
                if sprint_wins > 0:
                    stats += f" (S:{sprint_wins})"
                stats += f" üèÖ{podiums}"

                print(f"   {idx}. {driver['driver']} ({driver['team']}) - {points:.1f} –æ—á–∫–æ–≤ {stats}")

            print(f"\nüìÅ –í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {results['output_dir']}")
            print("   ‚Ä¢ CSV —Ñ–∞–π–ª—ã —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è–º–∏")
            print("   ‚Ä¢ JSON —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (–≤–∫–ª—é—á–∞—è —Å–ø—Ä–∏–Ω—Ç—ã)")
            print("   ‚Ä¢ –ì—Ä–∞—Ñ–∏–∫–∏ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏")
            print("   ‚Ä¢ –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –≥–æ–Ω–∫–∞-–∑–∞-–≥–æ–Ω–∫–æ–π")

        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–∏: {e}")
            import traceback
            traceback.print_exc()

        input("\n‚èé –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")

    def list_models(self):
        """–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"""
        print("\n" + "="*60)
        print("üìä –î–û–°–¢–£–ü–ù–´–ï –ú–û–î–ï–õ–ò")
        print("="*60)

        available_models = self.trainer.list_models()

        if not available_models:
            print("\n‚ùå –ù–µ—Ç –æ–±—É—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π!")
        else:
            print()
            for idx, model_info in enumerate(available_models, 1):
                print(f"{idx}. üì¶ {model_info['name']}")
                print(f"   üìÖ –û–±—É—á–µ–Ω–∞ –Ω–∞ –≥–æ–¥–∞—Ö: {', '.join(map(str, model_info['years']))}")
                print(f"   üìÅ –ü—É—Ç—å: {model_info['path']}")
                if 'metrics' in model_info:
                    metrics = model_info['metrics']
                    print(f"   üìä MAE: {metrics.get('mae', 'N/A'):.3f}, Accuracy: {metrics.get('accuracy', 'N/A'):.2%}")
                print()

        input("\n‚èé –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")

    def run(self):
        """–ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –º–µ–Ω—é"""
        while True:
            self.clear_screen()
            self.print_header()
            self.print_menu()

            choice = input("‚û§ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ").strip()

            if choice == "1":
                self.cache_data()
            elif choice == "2":
                self.train_model()
            elif choice == "3":
                self.test_model()
            elif choice == "4":
                self.make_prediction()
            elif choice == "5":
                self.list_models()
            elif choice == "0":
                print("\nüëã –î–æ –≤—Å—Ç—Ä–µ—á–∏!")
                break
            else:
                print("\n‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                input("\n‚èé –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")