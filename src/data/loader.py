"""
–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ FastF1 —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å–ø—Ä–∏–Ω—Ç–æ–≤ –∏ –∑–∞—â–∏—Ç–æ–π –æ—Ç rate limiting
"""
import fastf1
import pandas as pd
import numpy as np
import time
from pathlib import Path
from config import CACHE_DIR, API_REQUEST_DELAY

class F1DataLoader:
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑—á–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö"""
        self.cache_dir = Path(CACHE_DIR)
        self.cache_dir.mkdir(exist_ok=True)
        fastf1.Cache.enable_cache(str(self.cache_dir))

        # –ú–∞–ø–ø–∏–Ω–≥ –∫–æ–º–∞–Ω–¥ –¥–ª—è —É—á–µ—Ç–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π
        self.team_mappings = {
            'Racing Point': 'Aston Martin',
            'Alfa Romeo': 'Sauber',
            'AlphaTauri': 'RB',
            'Renault': 'Alpine',
        }

        # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (–∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞)
        self.request_delay = API_REQUEST_DELAY

    def normalize_team_name(self, team_name):
        """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã —Å —É—á–µ—Ç–æ–º –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π"""
        return self.team_mappings.get(team_name, team_name)

    def cache_season(self, year):
        """–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞ —Å–µ–∑–æ–Ω (–≤–∫–ª—é—á–∞—è —Å–ø—Ä–∏–Ω—Ç—ã)"""
        print(f"\nüì• –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è —Å–µ–∑–æ–Ω–∞ {year}...")

        try:
            schedule = fastf1.get_event_schedule(year)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {e}")
            return

        total_events = len(schedule)
        print(f"üìä –í—Å–µ–≥–æ —ç—Ç–∞–ø–æ–≤ –≤ —Å–µ–∑–æ–Ω–µ: {total_events}")
        print(f"‚è±Ô∏è  –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏: {self.request_delay}s (–∑–∞—â–∏—Ç–∞ –æ—Ç rate limiting)")

        for idx, event in schedule.iterrows():
            event_name = event['EventName']

            try:
                print(f"\n  [{idx+1}/{total_events}] üèÅ {event_name}")

                # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—é
                print(f"    ‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏...", end='', flush=True)
                quali = fastf1.get_session(year, event_name, 'Q')
                quali.load()
                print(" ‚úì")
                time.sleep(self.request_delay)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø—Ä–∏–Ω—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
                try:
                    print(f"    ‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø—Ä–∏–Ω—Ç–∞...", end='', flush=True)
                    sprint = fastf1.get_session(year, event_name, 'S')
                    sprint.load()
                    print(" ‚úì –°–ø—Ä–∏–Ω—Ç –Ω–∞–π–¥–µ–Ω")
                    time.sleep(self.request_delay)

                    # –ó–∞–≥—Ä—É–∂–∞–µ–º Sprint Qualifying –µ—Å–ª–∏ –µ—Å—Ç—å (2023+)
                    try:
                        print(f"    ‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ Sprint Qualifying...", end='', flush=True)
                        sprint_quali = fastf1.get_session(year, event_name, 'SQ')
                        sprint_quali.load()
                        print(" ‚úì")
                        time.sleep(self.request_delay)
                    except Exception:
                        print(" - (–Ω–µ—Ç SQ)")

                except Exception:
                    print(" - (–Ω–µ—Ç —Å–ø—Ä–∏–Ω—Ç–∞)")

                # –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–æ–Ω–∫—É
                print(f"    ‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –≥–æ–Ω–∫–∏...", end='', flush=True)
                session = fastf1.get_session(year, event_name, 'R')
                session.load()
                print(" ‚úì")
                time.sleep(self.request_delay)

            except Exception as e:
                print(f"\n    ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {event_name}: {e}")
                print(f"    üí° –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")
                time.sleep(self.request_delay * 2)
                continue

        print(f"\n‚úÖ –°–µ–∑–æ–Ω {year} —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω!")

    def load_season_data(self, year):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞ —Å–µ–∑–æ–Ω (–≤–∫–ª—é—á–∞—è —Å–ø—Ä–∏–Ω—Ç—ã)"""
        print(f"\nüìä –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞ {year} –≥–æ–¥...")

        try:
            schedule = fastf1.get_event_schedule(year)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {e}")
            return pd.DataFrame()

        season_data = []
        successful_events = 0
        failed_events = 0

        for idx, event in schedule.iterrows():
            event_name = event['EventName']

            try:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—é
                quali = fastf1.get_session(year, event_name, 'Q')
                quali.load()
                time.sleep(self.request_delay)

                # –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–æ–Ω–∫—É
                session = fastf1.get_session(year, event_name, 'R')
                session.load()
                time.sleep(self.request_delay)

                # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≥–æ–Ω–∫–µ
                race_data = self._extract_race_data(session, quali, event_name, year, is_sprint=False)
                season_data.extend(race_data)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–ø—Ä–∏–Ω—Ç–∞
                try:
                    sprint = fastf1.get_session(year, event_name, 'S')
                    sprint.load()
                    time.sleep(self.request_delay)

                    # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å Sprint Qualifying
                    try:
                        sprint_quali = fastf1.get_session(year, event_name, 'SQ')
                        sprint_quali.load()
                        time.sleep(self.request_delay)
                    except:
                        # –î–ª—è —Å—Ç–∞—Ä—ã—Ö —Å–µ–∑–æ–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—É—é –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—é
                        sprint_quali = quali

                    sprint_data = self._extract_race_data(sprint, sprint_quali, event_name, year, is_sprint=True)
                    season_data.extend(sprint_data)
                    print(f"  ‚úì {event_name} (+ —Å–ø—Ä–∏–Ω—Ç)")

                except Exception:
                    # –ù–µ—Ç —Å–ø—Ä–∏–Ω—Ç–∞ - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
                    print(f"  ‚úì {event_name}")

                successful_events += 1

            except Exception as e:
                print(f"  ‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫ {event_name}: {e}")
                failed_events += 1
                time.sleep(self.request_delay * 2)
                continue

        df = pd.DataFrame(season_data)
        print(f"\n‚úÖ –°–æ–±—Ä–∞–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π")
        print(f"   üìä –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {successful_events} —ç—Ç–∞–ø–æ–≤")
        if failed_events > 0:
            print(f"   ‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ: {failed_events} —ç—Ç–∞–ø–æ–≤")

        return df

    def _extract_race_data(self, race_session, quali_session, event_name, year, is_sprint=False):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–µ—Å—Å–∏–∏ (–≥–æ–Ω–∫–∞ –∏–ª–∏ —Å–ø—Ä–∏–Ω—Ç)"""
        race_data = []
        session_type = 'sprint' if is_sprint else 'race'

        results = race_session.results

        for idx, row in results.iterrows():
            try:
                driver_abbr = row['Abbreviation']

                # –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
                data = {'year': year, 'event': event_name, 'session_type': session_type, 'driver': row['FullName'],
                        'driver_abbr': driver_abbr, 'team': self.normalize_team_name(row['TeamName']),
                        'position': row['Position'] if pd.notna(row['Position']) else 99,
                        'points': row['Points'] if pd.notna(row['Points']) else 0, 'status': row['Status'],
                        'grid_position': row['GridPosition'] if pd.notna(row['GridPosition']) else 20,
                        'dnf': 1 if 'DNF' in str(row['Status']) or 'Retired' in str(row['Status']) else 0,
                        'dsq': 1 if 'Disqualified' in str(row['Status']) else 0}

                # –ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                quali_data = self._get_quali_data(quali_session, driver_abbr)
                data.update(quali_data)

                # –î–∞–Ω–Ω—ã–µ –≥–æ–Ω–∫–∏/—Å–ø—Ä–∏–Ω—Ç–∞
                race_stats = self._get_race_stats(race_session, driver_abbr)
                data.update(race_stats)

                # –ü–æ–≥–æ–¥–∞
                weather = self._get_weather_data(race_session)
                data.update(weather)

                race_data.append(data)

            except Exception:
                # –¢–∏—Ö–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—à–∏–±–∫–∏ –Ω–∞ —É—Ä–æ–≤–Ω–µ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –≥–æ–Ω—â–∏–∫–æ–≤
                continue

        return race_data

    @staticmethod
    def _get_quali_data(quali_session, driver_abbr):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        try:
            quali_results = quali_session.results
            driver_quali = quali_results[quali_results['Abbreviation'] == driver_abbr]

            if len(driver_quali) == 0:
                return {
                    'quali_position': 20,
                    'q1_time': np.nan,
                    'q2_time': np.nan,
                    'q3_time': np.nan,
                }

            driver_quali = driver_quali.iloc[0]

            return {
                'quali_position': driver_quali['Position'] if pd.notna(driver_quali['Position']) else 20,
                'q1_time': driver_quali['Q1'].total_seconds() if pd.notna(driver_quali['Q1']) else np.nan,
                'q2_time': driver_quali['Q2'].total_seconds() if pd.notna(driver_quali['Q2']) else np.nan,
                'q3_time': driver_quali['Q3'].total_seconds() if pd.notna(driver_quali['Q3']) else np.nan,
            }
        except Exception:
            return {
                'quali_position': 20,
                'q1_time': np.nan,
                'q2_time': np.nan,
                'q3_time': np.nan,
            }

    def _get_race_stats(self, race_session, driver_abbr):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥–æ–Ω–∫–∏"""
        try:
            laps = race_session.laps.pick_drivers(driver_abbr)

            if len(laps) == 0:
                return self._empty_race_stats()

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫—Ä—É–≥–∞–º
            stats = {
                'total_laps': len(laps),
                'fastest_lap': laps['LapTime'].min().total_seconds() if not laps['LapTime'].isna().all() else np.nan,
                'avg_lap_time': laps['LapTime'].mean().total_seconds() if not laps['LapTime'].isna().all() else np.nan,
                'pit_stops': len(laps[laps['PitInTime'].notna()]),
            }

            # –¢–µ–ª–µ–º–µ—Ç—Ä–∏—è (—Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è)
            if 'SpeedST' in laps.columns:
                stats['avg_speed'] = laps['SpeedST'].mean() if not laps['SpeedST'].isna().all() else np.nan
            else:
                stats['avg_speed'] = np.nan

            return stats

        except Exception:
            return self._empty_race_stats()

    @staticmethod
    def _empty_race_stats():
        """–ü—É—Å—Ç–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–æ–Ω–∫–∏"""
        return {
            'total_laps': 0,
            'fastest_lap': np.nan,
            'avg_lap_time': np.nan,
            'pit_stops': 0,
            'avg_speed': np.nan,
        }

    @staticmethod
    def _get_weather_data(race_session):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ"""
        try:
            weather = race_session.weather_data
            if weather is not None and len(weather) > 0:
                return {
                    'air_temp': weather['AirTemp'].mean(),
                    'track_temp': weather['TrackTemp'].mean(),
                    'humidity': weather['Humidity'].mean(),
                    'rainfall': weather['Rainfall'].any() * 1,
                }
        except Exception:
            pass

        return {
            'air_temp': np.nan,
            'track_temp': np.nan,
            'humidity': np.nan,
            'rainfall': 0,
        }

    def get_active_drivers_teams(self, year):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥–æ–Ω—â–∏–∫–æ–≤ –∏ –∫–æ–º–∞–Ω–¥"""
        try:
            schedule = fastf1.get_event_schedule(year)
            # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –≥–æ–Ω–∫—É —Å–µ–∑–æ–Ω–∞
            last_event = schedule.iloc[-1]['EventName']
            session = fastf1.get_session(year, last_event, 'R')
            session.load()

            results = session.results

            drivers = results['FullName'].tolist()
            teams = [self.normalize_team_name(t) for t in results['TeamName'].tolist()]

            return list(set(drivers)), list(set(teams))
        except Exception as e:
            print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≥–æ–Ω—â–∏–∫–æ–≤ –∏ –∫–æ–º–∞–Ω–¥ –∑–∞ {year}: {e}")
            return [], []
